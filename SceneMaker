import csv
import os


def generate_scene_file(param1, param2,param3,param4):
    # Create a PBRT scene file using the parameters
    scene_text = f"""
    # PBRT scene file with parameters {param1} and {param2} and {param3} and {param4}
      
    Film "image" "integer xresolution" [1280] "integer yresolution" [720]
LookAt 0.491171 -4.4848 0.897406 0 0 0 0 0 1
Camera "perspective" "float fov" [30] 
Sampler "lowdiscrepancy" "integer pixelsamples" 1 #changed to 1 for brute render speed

SurfaceIntegrator "multipolesubsurface" #this is likely what controls specularity, and has an effect which overwrites texture input 
  "integer maxdepth" 5 #changed from 5 to 2 -- no effect
  "float maxerror" 0.1
  "float minsampledistance" 0.0015 #beyond 0.0001 causes crash -- making big just makes it grainy 

WorldBegin

AttributeBegin
 #lights -- this is our isi naturalistic light source -- check for artifacts 
    Scale -1 1 1
    Rotate 90 -1 0 0
    Rotate 90 1 0 0
    Translate 30 30 30
    LightSource "infinite"
        "string mapname" [ "E:/pbrt-v2-skinPat/scenes/textures/small_rural_road_equiarea.exr" ]
        "integer	nsamples" [5] #crank this up to remove grainyness
AttributeEnd


  AttributeBegin
    Translate 0 1 -.35 # move up a bit
    Rotate 90  1 0 0
	  Scale 3 3 3
      # lets try and run this wihtout loading the textures 
    Material "layeredskin" "float roughness" 0.35 #0.35 is the paper value 
                           "float nmperunit" 40e6 # nanometers per unit length in world space
                           "color Kr" [0 0 0]
                           "color Kt" [0 0 0] # edit did little changing from 1 to zero  -- this is translucency; can't be seen with a black background
                           # each layer's depth and index of refraction; units are in nanometers
                           "skinlayer layers" [ {param3}e6 1.4 20e6 1.4] # is this the thickness -- or above
                           ## this is the best K epid thickness for candiate 0 
                           "float f_mel" {param2} #from skin_code tables 
                           "float f_eu" {param4} #clamp this at 0.5 as this is where we make the pigment maps from 
               
                           "float f_blood" {param1} # abs of whole blood -- where do I get this from 
                           "float f_ohg" 0.75 #seems to be gamma ratio 
                 
                           #"texture albedo" "lambertian-norm"
                           
    Include "E:/pbrt-v2-skinPat/Scenes/geometry/processed/S000Mesh.pbrt"
    AttributeEnd
  
WorldEnd
    """

    return scene_text


def generate_render_commands(output_directory, params):
    # Generate render commands and write them to a batch file
    batch_file_path = os.path.join(output_directory, 'render_all.bat')
    with open(batch_file_path, 'w') as batch_file:
        for i in range(len(params)):
            for j in range(len(params)):
                for k in range(len(params[2][:])):
                    for b in range(len(params[3][:])): # 5 beta values

                        param1, param2,param3,param4, = params[0][i], params[1][j], params[2][k],params[3][b]
                        scene_filename = f'scene_{i}_{j}_{k}_{b}.pbrt'
                        render_command = f'..\\bin\\pbrt.exe {scene_filename} --outfile ..\\render_bulk\\{scene_filename.replace(".pbrt", ".exr")}\n'
                        batch_file.write(render_command)

def write_scene_file(scene_text, output_path):
    # Write the scene text to a .pbrt file
    with open(output_path, 'w') as f:
        f.write(scene_text)

def main():
    input_csv_file = 'perms.csv' #this is just for the permutations that will be used in the render 
    output_directory = 'output_scenes'
    render_directory = 'render_bulk'

    

    # Create the output directory if it doesn't exist
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # Create the render directory if it doesn't exist
    if not os.path.exists(render_directory):
        os.makedirs(render_directory)

    # Read parameters from CSV
    with open(input_csv_file, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        next(csv_reader)  # Skip header row if exists
        params = list(csv_reader)
    params = list(map(list, zip(*params))) #transpose the data to make it sliceable

    # Remove empty elements
    params= [[value for value in row if value.strip()] for row in params]


    count = 0 

    # Generate combinations and create scene files
    with open("render_scenes.bat", "w") as batch_file:
        
        '''
        #original permute
        for i in range(len(params)):
            for j in range(len(params)):
                for k in range(len(params[2][:])):
                        for b in range(len(params[3][:])): # 5 beta values
                            param1, param2, param3, param4 = params[0][i], params[1][j], params[2][k],params[3][b]
                            scene_text = generate_scene_file(param1, param2,param3,param4)
                            output_filename = f'scene_{i}_{j}_{k}_{b}.pbrt'
                            output_path = os.path.join(output_directory, output_filename)
                            write_scene_file(scene_text, output_path)
                            # Render the scene using PBRT here if needed
                            # Generate render commands
                            command = f' .\\output_scenes\\{output_filename} '
                            batch_file.write(command)
                            count+=1
                            if count==20:
                                batch_file.write(f'\n .\\bin\\pbrt.exe ')
                                count = 0
    '''

        # if pre-perumted (for limited perms)
        for i in range(len(params[0][:])):
            param1, param2, param3, param4 = params[0][i], params[1][i], params[2][i],params[3][i]
            sub1,sub2,sub3,sub4 = params[4][i], params[5][i], params[6][i],params[7][i] #these are for file naming -- these will have non zero indexing 
            scene_text = generate_scene_file(param1, param2,param3,param4)
            output_filename = f'scene_{sub1}_{sub2}_{sub3}_{sub4}.pbrt'
            output_path = os.path.join(output_directory, output_filename)
            write_scene_file(scene_text, output_path)
            # Render the scene using PBRT here if needed
            # Generate render commands, but only if it hasn't been done already
            if not os.path.exists(f'{render_directory}/{output_filename.replace(".pbrt", ".exr")}'):
                command = f' .\\bin\\pbrt.exe .\\output_scenes\\{output_filename} \n '
                batch_file.write(command)
    
    generate_render_commands(output_directory, params)
    print('Scene files generated successfully!')


if __name__ == "__main__":
    main()
